lass Solution {
public:

    bool checkPalindrome(string s, int start, int end){
        while(start<end){
            if(s[start] != s[end])
                return false;

            start++;
            end--;
        }
        return true;
    }

    void palindromePartition(int index, vector<string> &temp, vector<vector<string>> &ans, string s ){
        //base case
        //sequenc ko add krdo temp mein
        if(index == s.length()){
            ans.push_back(temp);
            return;
        }

        for(int i=index; i<s.length() ; i++){
            if(checkPalindrome(s, index, i)){
                temp.push_back(s.substr(index, i-index+1));
                palindromePartition(i+1, temp, ans, s);
                temp.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;

        palindromePartition(0, temp, ans, s);
        return ans;
    }
};
