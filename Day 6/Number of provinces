class Solution {
public:
    void dfs(int node, vector<int> adjLs[], vector<int> &visited ){
        if (visited[node])return;
        visited[node] = 1;
        for(auto it: adjLs[node]){
            dfs(it, adjLs, visited);
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int V = isConnected.size();
        vector<int> adjLs[V+1];
        for(int i=0; i<V; i++){
            for(int j=0; j<V; j++){
                if(isConnected[i][j]==1 && i!=j){
                    adjLs[i].push_back(j);
                    adjLs[j].push_back(i);
                }
            }
        }
        vector<int> visited(V+1, 0);
        int cnt = 0;
        for(int i=0; i<V; i++){
            if(visited[i] == 0){
                cnt++;
                dfs(i, adjLs, visited);
            }
        }
        return cnt;
    }
  };
