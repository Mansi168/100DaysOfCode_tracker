class Solution {
private:
    bool subsetSumEqualToK(int n, int k, vector<int>& nums ){
        vector<bool> prev(k+1, 0), curr(k+1, 0);
        prev[0] = curr[0] = true;
        if(nums[0] <= k) prev[nums[0]] = true;
        for(int i=1; i<n; i++){
            for(int target = 1; target<=k ; target++){
                bool notTake = prev[target];
                bool take = false;
                if(nums[i] <= target ) take = prev[target-nums[i]];
                curr[target] = take | notTake;
            }
            prev = curr;
        }
        return prev[k];
    }

public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int totsum = 0;
        for(int i=0; i<n; i++){
            totsum += nums[i];
        } 
        if(totsum%2 ) return false;
        int target = totsum/2;
        
        return subsetSumEqualToK(n, target, nums);
            
    }
};
