class Solution{   
public:

    //RECURSION
    // bool f(int ind, int target,vector<int>&arr){
    //     //Base case
    //     if(target==0) return true;
    //     if(ind==0) return (arr[0]==target);
        
    //     //possibbilites
    //     int notTake = f(ind-1, target, arr);
        
    //     int take = false;
    //     if(target >= arr[ind]){
    //         take = f(ind-1, target-arr[ind], arr);
    //     }
        
    //     return take | notTake;
    // }
    // bool isSubsetSum(vector<int>arr, int sum){
    //     int n = arr.size();
    //     return f(n-1, sum, arr);
    // }
    
    //MEMOIZATION
    // bool f(int ind, int target,vector<int>&arr, vector<vector<bool>>&dp){
    //     //Base case
    //     if(target==0) return true;
    //     if(ind==0) return (arr[0]==target);
        
    //     if(dp[ind][target]!=-1) return dp[ind][target];
        
    //     //possibbilites
    //     int notTake = f(ind-1, target, arr, dp);
        
    //     int take = false;
    //     if(target >= arr[ind]){
    //         take = f(ind-1, target-arr[ind], arr, dp);
    //     }
        
    //     return dp[ind][target] = take | notTake;
    // }
    // bool isSubsetSum(vector<int>arr, int sum){
    //     int n = arr.size();
    //     vector<vector<bool>>dp(n, vector<bool>(sum,-1));
    //     return f(n-1, sum, arr,dp);
    // }
    
    //TABULATION
    // bool isSubsetSum(vector<int>arr, int sum){
    //     int n = arr.size();
    //     vector<vector<bool>>dp(n, vector<bool>(sum,-1));
    //     for(int i=0; i<n-1; i++){
    //         dp[i][0] = true;
    //     }
    //     dp[0][arr[0]] = true;
        
    //     //nested loops
    //     for(int ind=1; ind<n; ind++){
    //         for(int target=1; target<=sum; target++){
    //             bool notTake = dp[ind-1][target];
    //             bool take = false;
    //             if(arr[ind]<=target) take=dp[ind-1][target-arr[ind]];
    //             dp[ind][target] = take | notTake ;
    //         }
    //     }
    //     return dp[n-1][sum];
        
    // }
    
    
    //SPACE OPTIMIMZATION
    bool isSubsetSum(vector<int>arr, int sum){
        int n = arr.size();
        vector<bool> prev(sum+1,0), curr(sum+1, 0);
        prev[0] = curr[0] = true;
        prev[arr[0]] = true;
        
        for(int ind=1; ind<n; ind++){
            for(int target=1; target<=sum; target++){
                bool notTake = prev[target];
                bool take = false;
                if(arr[ind] <= target) take = prev[target-arr[ind]];
                curr[target] = take | notTake ;
            }
        
            prev = curr;
        }
        return prev[sum];
    }
    
    
};
